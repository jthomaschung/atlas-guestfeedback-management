import { useEffect } from 'react';
import { sessionTokenUtils } from '@/utils/sessionToken';
import { useAuth } from '@/hooks/useAuth';

export function SessionTokenHandler() {
  const { user } = useAuth();

  useEffect(() => {
    const handleIncomingTokens = async () => {
      console.log('üîç SessionTokenHandler: Starting token check');
      console.log('üîç Current URL:', window.location.href);
      console.log('üîç User authenticated:', !!user);
      
      // Only process tokens if user is not already authenticated
      if (user) {
        console.log('‚úÖ User already authenticated, cleaning URL');
        sessionTokenUtils.cleanUrl();
        return;
      }

      const tokens = sessionTokenUtils.extractTokensFromUrl();
      console.log('üîç Extracted tokens:', tokens ? '‚úÖ Found' : '‚ùå Not found');
      
      if (!tokens) {
        console.log('‚ùå No tokens found in URL');
        return;
      }

      console.log('üîç Token details:', {
        hasAccessToken: !!tokens.access_token,
        hasRefreshToken: !!tokens.refresh_token,
        expiresAt: tokens.expires_at
      });

      // Check if tokens are still valid
      if (!sessionTokenUtils.areTokensValid(tokens)) {
        console.warn('‚ö†Ô∏è Received expired tokens');
        sessionTokenUtils.cleanUrl();
        return;
      }

      try {
        console.log('üöÄ Attempting to authenticate with tokens...');
        const success = await sessionTokenUtils.authenticateWithTokens(tokens);
        console.log('üîç Authentication result:', success ? '‚úÖ Success' : '‚ùå Failed');
        
        if (success) {
          console.log('‚úÖ Successfully authenticated with session tokens');
          // Clean up URL after successful authentication
          setTimeout(() => {
            console.log('üßπ Cleaning URL...');
            sessionTokenUtils.cleanUrl();
          }, 1000);
        } else {
          console.error('‚ùå Failed to authenticate with session tokens');
          sessionTokenUtils.cleanUrl();
        }
      } catch (error) {
        console.error('üí• Error processing session tokens:', error);
        sessionTokenUtils.cleanUrl();
      }
    };

    handleIncomingTokens();
  }, [user]);

  return null; // This component doesn't render anything
}